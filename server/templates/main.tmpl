{{define "content"}}
    <div class="tabs is-toggle is-toggle-rounded">
        <ul>
            <li class="is-active">
                <a href="/">
                    <span>Home</span>
                </a>
            </li>
            <li>
                <a href="/resume">
                    <span>Resume</span>
                </a>
            </li>
            <li>
                <a href="/list">
                    <span>List</span>
                </a>
            </li>
            <li>
                <a href="/save">
                    <span>Save</span>
                </a>
            </li>
            <li>
                <a href="/recall">
                    <span>Recall</span>
                </a>
            </li>
        </ul>
    </div>
    <div id="start_window">
        <div class="card">
            <div class="card-content">
                <p>This tool allows you to select the endpoint that your streaming software is streaming to and then
                    forward it onto your platforms of choice.<br>
                    Streamer is designed to be straightforward to use,
                    you select the endpoint that you are streaming to by
                    selecting the possible endpoints using the checkboxes below
                    and then pressing "Refresh streams".</p><br>
                <p id="start_window_server_error" style="color: red">{{.Error}}</p>
                <p class="title">Stream endpoint selector</p>
                <p class="subtitle">Endpoints</p>
                <p id="streams_result"></p><br>
                <p class="subtitle">Selection</p>
                <form id="endpoint_selector">
                    <p id="endpoints_table_error" style="color: red"></p>
                    <table class="table table-bordered" id="endpoints_table"></table>
                    <br>
                    <input type="button" id="stream_check" class="button" value="Refresh streams"/>
                </form>
                <br>
            </div>
        </div>

        <form id="stream_outs">
            <div class="card">
                <div class="card-content">

                    <p>After refreshing what streams are active, you can select the endpoint with the dropdown box
                        below</p>
                    <br>
                    <p class="subtitle">Select stream</p>
                    <div class="select">
                        <label for="stream_selector"></label>
                        <select name="stream_selector" id="stream_selector">
                            <option value="please_select" selected>Please select</option>
                        </select>
                    </div>
                    <br><br>
                </div>
            </div>

            <div id="stream_further_1" hidden>
                <div class="card">
                    <div class="card-content">
                        <p class="title">Stream outputs</p>
                        <p class="subtitle">Recording</p>
                        <p>This is the file output of the stream, it will be saved as a .mkv file, and you can specify a
                            path<br>
                            It will be saved in the pending edits folder on the network drive (not to be confused with
                            the
                            Google Drive)<br>
                            The format to follow is (folder/file) e.g. ERN/ERN.mkv, the folder will be created in
                            pending
                            edits
                            if it doesn't already exist<br>
                            The extension (.mkv) will be added to the end of the file if it doesn't already contain it
                        </p>
                        <br>
                        <label for="record_checkbox">Record stream </label>
                        <input name="record_checkbox" id="record_checkbox" type="checkbox" checked><br>
                        <label for="save_path">MKV save location </label><br>
                        <input type="text" name="save_path" id="save_path" placeholder="ERN/ERN.mkv"
                               class="input"><br><br>
                    </div>
                </div>
                <div class="card">
                    <div class="card-content">
                        <p class="subtitle">Website forwarding</p>
                        <p>If this is selected then it will default to stream1?pwd=gamer<br>
                            By default, the website works with streaming to the live endpoint so that is done by default<br>
                            Use the live endpoint followed by one of the keys in <a
                                    href="https://cobra.dev.ystv.co.uk/streamkeys">cobra</a>
                            [stream key and password]<br>
                            This is especially important for events like Roses</p><br>
                        <label for="website_stream">Stream to website </label>
                        <input name="website_stream" id="website_stream" type="checkbox" checked><br>
                        <label for="website_stream_endpoint">Website stream endpoint</label><br>
                        <input name="website_stream_endpoint"
                               id="website_stream_endpoint"
                               placeholder="stream1?pwd=gamer"
                               class="input" required><br><br>
                    </div>
                </div>
                <div class="card">
                    <div class="card-content">
                        <p class="subtitle">Additional forwarding</p>
                        <p>This section is for adding all the stream servers and keys<br>
                            All stream servers should start with "rtmp://" or "rtmps://"<br>
                            If you are unsure how to get the stream servers and keys from YouTube and Facebook then
                            click on
                            the
                            links below<br>
                            <a target="_blank" href="/youtubehelp">YouTube</a><br>
                            <a target="_blank" href="/facebookhelp">Facebook</a></p><br>
                        <label for="input"></label><input type="text" id="input" hidden disabled/>
                        <table class="table table-bordered" id="streams_dynamic_field">
                            <tr>
                                <td><label for="stream_server_0">Enter the stream server - 1 </label><br>
                                    <input type="text" name="stream_server_0" id="stream_server_0"
                                           placeholder="Enter stream server" class="input" required/><br><br>
                                    <label for="stream_key_0">Enter the stream key - 1 </label><br>
                                    <input type="text" name="stream_key_0" id="stream_key_0"
                                           placeholder="Enter stream key"
                                           class="input" required/><br><br>
                                </td>
                                <td>
                                    <button type="button" name="add_stream_button" id="add_stream_button"
                                            class="btn btn-success button">Add More
                                    </button>
                                </td>
                            </tr>
                        </table>
                        <p id="start_error" style="color: red"></p><br>
                        <input id="start_button" type="button" class="button" value="Start"/>
                    </div>
                </div>
            </div>
        </form>
    </div>
    {{block "statusWindowHTML" .}}{{end}}
    {{block "stopWindowHTML" .}}{{end}}
    <script>
        document.getElementById("website_stream").onchange = function () {
            document.getElementById("website_stream_endpoint").disabled = !this.checked;
            document.getElementById("website_stream_endpoint").hidden = !this.checked;
            if (this.checked) {
                document.getElementById("website_stream_endpoint").style.visibility = "visible";
                document.getElementById("website_stream_endpoint").setAttribute("required", "required");
            } else {
                document.getElementById("website_stream_endpoint").style.visibility = "hidden";
                document.getElementById("website_stream_endpoint").removeAttribute("required");
            }
        };

        document.getElementById("record_checkbox").onchange = function () {
            document.getElementById("save_path").disabled = !this.checked;
            document.getElementById("save_path").hidden = !this.checked;
            if (this.checked) {
                document.getElementById("save_path").style.visibility = "visible";
                document.getElementById("save_path").setAttribute("required", "required");
            } else {
                document.getElementById("save_path").style.visibility = "hidden";
                document.getElementById("save_path").removeAttribute("required");
            }
        };

        let streamsCheck = function () {
            $.ajax({
                url: "streams",
                type: "post",
                dataType: "text",
                contentType: "application/x-www-form-urlencoded",
                data: $("#endpoint_selector").serialize(),
                success: function (data) {
                    let streamsResult = $("#streams_result");
                    let streamSelectorBefore = $("#stream_selector").val();

                    const streamsResponseJson = JSON.parse(data);
                    if (streamsResponseJson.error !== "") {
                        streamsResult.html(streamsResponseJson.error);
                        return;
                    }

                    let streamFurther = $("#stream_further_1");

                    if (streamsResponseJson.streams.length === 0) {
                        streamsResult.html("No active streams with the current selection");
                        let selectObject = document.getElementById("stream_selector");
                        for (let i = selectObject.length; i > 0; i--) {
                            selectObject.remove(i);
                        }
                        selectObject.options.selectedIndex = 0;
                        streamFurther.hide();
                        return;
                    }

                    let streamsResultOut = "";

                    let selectObject = document.getElementById("stream_selector");
                    for (let i = selectObject.length; i > 0; i--) {
                        selectObject.remove(i);
                    }

                    let select = document.getElementById("stream_selector");
                    for (let stream of streamsResponseJson.streams) {
                        select.options[select.options.length] = new Option(stream, stream);
                        streamsResultOut += stream + "&emsp;";
                    }

                    streamsResult.html(streamsResultOut);

                    if (streamSelectorBefore === "please_select") {
                        selectObject.options.selectedIndex = 0;
                        streamFurther.hide();
                        return;
                    }

                    for (let i = 0; i < select.options.length; i++) {
                        if (select.options[i].value === streamSelectorBefore) {
                            selectObject.options.selectedIndex = i;
                            return;
                        }
                    }

                    selectObject.options.selectedIndex = 0;
                    streamFurther.hide();
                },
            });
        };

        document.getElementById("stream_check").addEventListener("click", () => {
            streamsCheck();
        });

        $(document).ready(function () {
            let unique;
            // statusInterval is used in the templates
            let statusInterval;
            // statusWindowServerErrorInterval is used in the templates
            let statusWindowServerErrorInterval;
            let startWindowServerErrorInterval;
            let startWindowServerError = $("#start_window_server_error");
            let endpointsTableError = $("#endpoints_table_error");

            startWindowServerErrorInterval = setInterval(function () {
                $.ajax({
                    url: "serverError",
                    type: "post",
                    dataType: "text",
                    contentType: "application/x-www-form-urlencoded",
                    data: ({"unique_code": unique}),
                    success: function (data) {
                        startWindowServerError.html("");
                        const serverErrorResponseJson = JSON.parse(data);
                        if (serverErrorResponseJson.error !== "") {
                            startWindowServerError.html(serverErrorResponseJson.error + "<br>");
                            return;
                        }
                        startWindowServerError.html(serverErrorResponseJson.serverError);
                    },
                });
            }, 5000);

            let endpointsCheckErrorInterval;

            let endpointsCheck = function () {
                $.ajax({
                    url: "endpoints",
                    type: "post",
                    dataType: "text",
                    contentType: "application/x-www-form-urlencoded",
                    data: ({"unique": unique}),
                    success: function (data) {
                        const endpointsResponseJson = JSON.parse(data);
                        endpointsTableError.html("");
                        if (endpointsResponseJson.error !== "") {
                            endpointsTableError.html(endpointsResponseJson.error + "<br>");
                            if (endpointsCheckErrorInterval === undefined) {
                                endpointsCheckErrorInterval = setInterval(endpointsCheck, 5000);
                            }
                            return;
                        }
                        clearInterval(endpointsCheckErrorInterval);
                        for (let endpoint of endpointsResponseJson.endpoints) {
                            $("#endpoints_table").append("<tr>" +
                                "<td>" +
                                "<label for='endpoint~" + endpoint + "'>Endpoint: " + endpoint + "</label>" +
                                "</td>" +
                                "<td>" +
                                "<input name='endpoint~" + endpoint + "' id='endpoint~" + endpoint + "' type='checkbox' " + ((endpoint === "internal") ? "checked" : "") + "/>" +
                                "</td>" +
                                "</tr>");
                        }
                        streamsCheck();
                    },
                });
            };

            endpointsCheck();

            $("#stream_selector").change(function () {
                if ($(this).val() === "please_select") {
                    $("#stream_further_1").hide();
                } else {
                    $("#stream_further_1").show();
                    $("#input").val($(this).val());
                }
            });

            let i = 1;

            $("#add_stream_button").click(function () {
                $("#streams_dynamic_field").append("<tr id='row_" + i + "' class='dynamic-added'><td><label for='stream_server_" + i + "'>Enter the stream server - " + (i + 1) + " </label><br><input type='text' name='stream_server_" + i + "' id='stream_server_" + i + "' placeholder='Enter stream server' class='input' required/><br><br>\n" +
                    "                <label for='stream_key_" + i + "'>Enter the stream key - " + (i + 1) + " </label><br><input type='text' name='stream_key_" + i + "' id='stream_key_" + i + "' placeholder='Enter stream key' class='input' required/><br><br></td><td><button type='button' name='remove' id='" + i + "' class='btn btn-danger btn_remove button'>X</button></td></tr><br>");
                i++;
            });

            $(document).on("click", ".btn_remove", function () {
                let button_id = $(this).attr("id");
                $("#row_" + button_id + "").remove();
            });

            let startPressed = false;

            let startButton = $("#start_button");
            let startError = $("#start_error");
            let savePath = $("#save_path");

            startButton.click(function () {
                if (startPressed) {
                    console.log("Start pressed multiple times");
                    return;
                }
                startPressed = true;
                startButton.disabled = true;
                startError.html("");
                if (savePath.val().length > 0 && document.getElementById("record_checkbox").checked) {
                    if (savePath.val().length === 0) {
                        console.log("SAVE PATH");
                        startError.html("The save path cannot be empty");
                        startPressed = false;
                        return;
                    }
                    if ( !savePath.val().endsWith(".mkv")) {
                        console.log("SAVE FILE");
                        startError.html("The save path must end in \".mkv\"");
                        startPressed = false;
                        return;
                    }
                }
                let websiteStreamEndpoint = $("#website_stream_endpoint");

                if (document.getElementById("website_stream").checked) {
                    if (websiteStreamEndpoint.val().length === 0 || !websiteStreamEndpoint.val().includes("?pwd=")) {
                        console.log("PWD");
                        startError.html("The website stream must contain \"?pwd=\"");
                        startPressed = false;
                        return;
                    }
                }

                let streamServer0 = $("#stream_server_0");

                if (streamServer0.val().length === 0 || $("#stream_key_0").val().length === 0) {
                    console.log("ADDITIONAL");
                    startError.html("The stream server and stream key cannot be empty");
                    startPressed = false;
                    return;
                }

                if ( !validURL(streamServer0.val())) {
                    console.log("STREAM SERVER");
                    startError.html("The stream server must contain \"rtmp://\" or \"rtmps://\" and needs to be a valid url");
                    startPressed = false;
                    return;
                }

                let j = 1;
                while (true) {
                    let streamServerJ = $("#stream_server_" + j);
                    if (streamServerJ.length === 0) {
                        if (j < i) {
                            j++;
                        } else {
                            break;
                        }
                        continue;
                    }
                    if (streamServerJ.val().length === 0 || $("#stream_key_" + j).val().length === 0) {
                        console.log("ADDITIONAL - " + j);
                        startError.html("The stream server and stream key cannot be empty");
                        startPressed = false;
                        return;
                    }
                    if ( !validURL(streamServerJ.val())) {
                        console.log("STREAM SERVER - " + j);
                        startError.html("The stream server must contain \"rtmp://\" or \"rtmps://\" and needs to be a valid url");
                        startPressed = false;
                        return;
                    }
                    if (j < i) {
                        j++;
                    } else {
                        break;
                    }
                }

                $.ajax({
                    url: "start",
                    type: "post",
                    dataType: "text",
                    contentType: "application/x-www-form-urlencoded",
                    data: $("#stream_outs").serialize(),
                    success: function (data) {
                        const startResponseJson = JSON.parse(data);
                        if (startResponseJson.error !== "") {
                            startError.html(startResponseJson.error);
                            startPressed = false;
                            return;
                        }
                        clearInterval(startWindowServerErrorInterval);
                        $("#unique").html(startResponseJson.unique);
                        document.getElementById("start_window").hidden = true;
                        document.getElementById("start_window").style.visibility = "hidden";
                        document.getElementById("status_window").hidden = false;
                        document.getElementById("status_window").style.visibility = "visible";
                        unique = startResponseJson.unique;
                        let tableStatus = $("#table_status");
                        if (document.getElementById("record_checkbox").checked) {
                            tableStatus.append("<tr><td><p class='subtitle'>Recording status</p><pre id='recording_status'></pre><br></td></tr>");
                        }
                        if (document.getElementById("website_stream").checked) {
                            tableStatus.append("<tr><td><p class='subtitle'>Website status</p><pre id='website_status'></pre><br></td></tr>");
                        }
                        tableStatus.append("<tr><td><p class='subtitle'>Stream 1 status</p><pre id='1_status'></pre><br></td></tr>");
                        let k = 2;
                        for (let j = 1; j < i; j++) {
                            try {
                                document.getElementById("row_" + j);
                                tableStatus.append("<tr><td><p class='subtitle'>Stream " + k + " status</p><pre id='" + k + "_status'></pre><br></td></tr>");
                                k++;
                            } catch (e) {

                            }
                        }
                        {{block "statusJSON" .}}{{end}}
                    },
                });
                startButton.disabled = false;
            });

            {{block "stopJSON" .}}{{end}}
        });

        function validURL(str) {
            let pattern = new RegExp("^(rtmps?:\\/\\/)?" + // protocol
                "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + // domain name
                "((\\d{1,3}\\.){3}\\d{1,3}))" + // OR ip (v4) address
                "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" + // port and path
                "(\\?[;&a-z\\d%_.~+=-]*)?" + // query string
                "(\\#[-a-z\\d_]*)?$", "i"); // fragment locator
            return !!pattern.test(str);
        }
    </script>
{{end}}