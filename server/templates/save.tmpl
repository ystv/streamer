{{define "content"}}
    <div class="tabs is-toggle is-toggle-rounded">
        <ul>
            <li>
                <a href="/">
                    <span>Home</span>
                </a>
            </li>
            <li>
                <a href="/resume">
                    <span>Resume</span>
                </a>
            </li>
            <li>
                <a href="/list">
                    <span>List</span>
                </a>
            </li>
            <li class="is-active">
                <a href="/save">
                    <span>Save</span>
                </a>
            </li>
            <li>
                <a href="/recall">
                    <span>Recall</span>
                </a>
            </li>
        </ul>
    </div>
    <div id="save_window">
        <div class="card">
            <div class="card-content">
                <p class="title">Save a stream</p>
                <p>This part allows for you to save the stream details, so you can immediately start a stream when you
                    have a few streams happening at once, this can be especially useful when Roses is going on.</p>
            </div>
        </div>
        <form id="save_form">
            <div class="card">
                <div class="card-content">
                    <p class="subtitle">Selection</p>
                    <p id="endpoint_table_error" style="color: red"></p>
                    <table class="table table-bordered" id="endpoint_table">
                    </table>
                    <br>
                    <label for="stream_input">Stream input </label><br>
                    <input type="text" id="stream_input" name="stream_input" placeholder="stream1"
                           class="input"/><br><br>
                </div>
            </div>
            <div class="card">
                <div class="card-content">
                    <p class="title">Stream outputs</p>
                    <p class="subtitle">Recording</p>
                    <p>This is the file output of the stream, it will be saved as a .mkv file, and you can specify a
                        path<br>
                        It will be saved in the pending edits folder on the network drive (not to be confused with the
                        Google Drive)<br>
                        The format to follow is (folder/file) e.g. ERN/ERN.mkv, the folder will be created in pending
                        edits
                        if it doesn't already exist<br>
                        The extension (.mkv) will be added to the end of the file if it doesn't already contain it</p>
                    <br>
                    <label for="record_checkbox">Record stream </label>
                    <input name="record_checkbox" id="record_checkbox" type="checkbox" checked><br>
                    <label for="save_path">MKV save location </label><br>
                    <input type="text" name="save_path" id="save_path" placeholder="ERN/ERN.mkv" class="input"><br><br>
                </div>
            </div>
            <div class="card">
                <div class="card-content">
                    <p class="subtitle">Website forwarding</p>
                    <p>If this is selected then it will default to stream1?pwd=gamer<br>
                        By default, the website works with streaming to the live endpoint so that is done by default<br>
                        Use the live endpoint followed by one of the keys in <a
                                href="https://cobra.dev.ystv.co.uk/streamkeys">cobra</a>
                        [stream key and password]<br>
                        This is especially important for events like Roses</p><br>
                    <label for="website_stream">Stream to website </label>
                    <input name="website_stream" id="website_stream" type="checkbox" checked><br>
                    <label for="website_stream_endpoint">Website stream endpoint</label><br>
                    <input name="website_stream_endpoint"
                           id="website_stream_endpoint"
                           placeholder="stream1?pwd=gamer"
                           class="input" required><br><br>
                </div>
            </div>
            <div class="card">
                <div class="card-content">
                    <p class="subtitle">Additional forwarding</p>
                    <p>This section is for adding all the stream servers and keys<br>
                        All stream servers should start with "rtmp://" or "rtmps://"<br>
                        If you are unsure how to get the stream servers and keys from YouTube and Facebook then click on
                        the
                        links below<br>
                        <a target="_blank" href="/youtubehelp">YouTube</a><br>
                        <a target="_blank" href="/facebookhelp">Facebook</a></p><br>
                    <label for="input"></label><input type="text" id="input" hidden disabled/>
                    <table class="table table-bordered" id="streams_dynamic_field">
                        <tr>
                            <td><label for="stream_server_0">Enter the stream server - 1 </label><br>
                                <input type="text" name="stream_server_0" id="stream_server_0"
                                       placeholder="Enter stream server" class="input" required/><br><br>
                                <label for="stream_key_0">Enter the stream key - 1 </label><br>
                                <input type="text" name="stream_key_0" id="stream_key_0" placeholder="Enter stream key"
                                       class="input" required/><br><br>
                            </td>
                            <td>
                                <button type="button" name="add_stream_button" id="add_stream_button"
                                        class="btn btn-success button">Add More
                                </button>
                            </td>
                        </tr>
                    </table>
                    <p id="save_error" style="color: red"></p><br>
                    <input class="button" id="save_button" type="button" value="Save">
                </div>
            </div>
        </form>
    </div>
    <div class="card" id="saved_stream_window" hidden>
        <div class="card-content">
            <p class="title">SAVED!</p><br>
            <p>The stream settings have been saved, the unique code is below</p><br>
            <p id="unique_code" class="subtitle"></p><br>
            <p>This window can be closed as long as you have the code to recall the stream<br>
                Use this link to recall and start the stream when you need it: <a
                        href="https://streamer.dev.ystv.co.uk/recall"
                        target="_blank">https://streamer.dev.ystv.co.uk/recall</a></p>
            <br><br><br>
        </div>
    </div>
    <script>
        document.getElementById("website_stream").onchange = function () {
            document.getElementById("website_stream_endpoint").disabled = !this.checked;
            document.getElementById("website_stream_endpoint").hidden = !this.checked;
            if (this.checked) {
                document.getElementById("website_stream_endpoint").style.visibility = "visible";
                document.getElementById("website_stream_endpoint").setAttribute("required", "required");
            } else {
                document.getElementById("website_stream_endpoint").style.visibility = "hidden";
                document.getElementById("website_stream_endpoint").removeAttribute("required");
            }
        };

        document.getElementById("record_checkbox").onchange = function () {
            document.getElementById("save_path").disabled = !this.checked;
            document.getElementById("save_path").hidden = !this.checked;
            if (this.checked) {
                document.getElementById("save_path").style.visibility = "visible";
                document.getElementById("save_path").setAttribute("required", "required");
            } else {
                document.getElementById("save_path").style.visibility = "hidden";
                document.getElementById("save_path").removeAttribute("required");
            }
        };

        let unique;

        $(document).ready(function () {
            let endpointsCheckErrorInterval;

            let endpointTableError = $("#endpoint_table_error");

            let endpointsCheck = function () {
                $.ajax({
                    url: "endpoints",
                    type: "post",
                    dataType: "text",
                    contentType: "application/x-www-form-urlencoded",
                    data: ({"unique": unique}),
                    success: function (data) {
                        const endpointsResponseJson = JSON.parse(data);
                        endpointTableError.html("");
                        if (endpointsResponseJson.error !== "") {
                            endpointTableError.html(endpointsResponseJson.error + "<br>");
                            if (endpointsCheckErrorInterval === undefined) {
                                endpointsCheckErrorInterval = setInterval(endpointsCheck, 5000);
                            }
                            return;
                        }
                        clearInterval(endpointsCheckErrorInterval);
                        for (let endpoint of endpointsResponseJson.endpoints) {
                            $("#endpoint_table").append("<tr>" +
                                "<td>" +
                                "<label for='endpoint~" + endpoint + "'>Endpoint: " + endpoint + "</label>" +
                                "</td>" +
                                "<td>" +
                                "<input name='endpoint~" + endpoint + "' id='endpoint~" + endpoint + "' type='checkbox' " + ((endpoint === "internal") ? "checked" : "") + "/>" +
                                "</td>" +
                                "</tr>");
                        }
                    },
                });
            }

            endpointsCheck();

            let i = 1;

            $("#add_stream_button").click(function () {
                $("#streams_dynamic_field").append("<tr id='row_" + i + "' class='dynamic-added'><td><label for='stream_server_" + i + "'>Enter the stream server - " + (i + 1) + " </label><br><input type='text' name='stream_server_" + i + "' id='stream_server_" + i + "' placeholder='Enter stream server' class='input' required/><br><br>\n" +
                    "                <label for='stream_key_" + i + "'>Enter the stream key - " + (i + 1) + " </label><br><input type='text' name='stream_key_" + i + "' id='stream_key_" + i + "' placeholder='Enter stream key' class='input' required/><br><br></td><td><button type='button' name='remove' id='" + i + "' class='btn btn-danger btn_remove button'>X</button></td></tr><br>");
                i++;
            });

            $(document).on("click", ".btn_remove", function () {
                let button_id = $(this).attr("id");
                $("#row_" + button_id + "").remove();
            });

            let savePressed = false;

            let saveButton = $("#save_button");
            let error = $("#save_error");
            let savePath = $("#save_path");

            saveButton.click(function () {
                if (savePressed) {
                    console.log("Save pressed multiple times");
                    return;
                }
                savePressed = true;
                saveButton.disabled = true;
                error.html("");
                if (savePath.val().length > 0 && document.getElementById("record_checkbox").checked) {
                    if (savePath.val().length === 0) {
                        console.log("SAVE PATH");
                        error.html("The save path cannot be empty");
                        savePressed = false;
                        return;
                    }
                    if (!savePath.val().endsWith(".mkv")) {
                        console.log("SAVE FILE");
                        error.html("The save path must end in \".mkv\"");
                        savePressed = false;
                        return;
                    }
                }

                let websiteStreamEndpoint = $("#website_stream_endpoint");

                if (document.getElementById("website_stream").checked) {
                    if (websiteStreamEndpoint.val().length === 0 || !websiteStreamEndpoint.val().includes("?pwd=")) {
                        console.log("PWD");
                        error.html("The website stream must contain \"?pwd=\"")
                        savePressed = false;
                        return;
                    }
                }

                let streamServer0 = $("#stream_server_0");

                if (streamServer0.val().length === 0 || streamServer0.val().length === 0) {
                    console.log("ADDITIONAL");
                    error.html("The stream server and stream key cannot be empty")
                    savePressed = false;
                    return;
                }

                if (!validURL(streamServer0.val())) {
                    console.log("STREAM SERVER");
                    error.html("The stream server must contain \"rtmp://\" or \"rtmps://\" and needs to be a valid url")
                    savePressed = false;
                    return;
                }

                let j = 1;
                while (true) {
                    let streamServerJ = $("#stream_server_" + j);
                    if (streamServerJ.length === 0) {
                        if (j < i) {
                            j++
                        } else {
                            break;
                        }
                        continue;
                    }
                    if (streamServerJ.val().length === 0 || $("#stream_key_" + j).val().length === 0) {
                        console.log("ADDITIONAL - " + j);
                        error.html("The stream server and stream key cannot be empty")
                        savePressed = false;
                        return;
                    }
                    if (!validURL(streamServerJ.val())) {
                        console.log("STREAM SERVER - " + j);
                        error.html("The stream server must contain \"rtmp://\" or \"rtmps://\" and needs to be a valid url")
                        savePressed = false;
                        return;
                    }
                    if (j < i) {
                        j++
                    } else {
                        break;
                    }
                }

                $.ajax({
                    url: "save",
                    type: "post",
                    dataType: "text",
                    contentType: "application/x-www-form-urlencoded",
                    data: $("#save_form").serialize(),
                    success: function (data) {
                        const saveResponseJson = JSON.parse(data);
                        if (saveResponseJson.error !== "") {
                            error.html(saveResponseJson.error);
                            savePressed = false;
                            return;
                        }
                        $("#unique_code").html(saveResponseJson.unique);
                        document.getElementById("save_window").hidden = true;
                        document.getElementById("save_window").style.visibility = "hidden";
                        document.getElementById("saved_stream_window").hidden = false;
                        document.getElementById("saved_stream_window").style.visibility = "visible";
                        unique = saveResponseJson.unique;
                    },
                });
                saveButton.disabled = false;
            });
        });

        function validURL(str) {
            let pattern = new RegExp("^(rtmps?:\\/\\/)?" + // protocol
                "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + // domain name
                "((\\d{1,3}\\.){3}\\d{1,3}))" + // OR ip (v4) address
                "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" + // port and path
                "(\\?[;&a-z\\d%_.~+=-]*)?" + // query string
                "(\\#[-a-z\\d_]*)?$", "i"); // fragment locator
            return !!pattern.test(str);
        }
    </script>
{{end}}
