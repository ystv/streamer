{{define "content"}}
    <div class="tabs is-toggle is-toggle-rounded">
        <ul>
            <li>
                <a href="/">
                    <span>Home</span>
                </a>
            </li>
            <li>
                <a href="/resume">
                    <span>Resume</span>
                </a>
            </li>
            <li>
                <a href="/list">
                    <span>List</span>
                </a>
            </li>
            <li>
                <a href="/save">
                    <span>Save</span>
                </a>
            </li>
            <li class="is-active">
                <a href="/recall">
                    <span>Recall</span>
                </a>
            </li>
        </ul>
    </div>
    <div class="card" id="recall_stream_window">
        <div class="card-content">
            <p class="title">Recall a stream</p><br>
            <form id="recall_form">
                <label for="unique">Enter the code you were given after saving the details in the box below</label><br>
                <input class="input" name="unique" id="unique" placeholder="ab12cd34ef"><br>
                <p id="recall_error" style="color: red"></p><br>
                <input class="button" id="submit_unique" type="button" value="Submit">
            </form>
        </div>
    </div>

    <div id="recalled_stream_window" hidden>
        <div class="card">
            <div class="card-content">
                <p class="title">RECALLED</p>
                <p>Below are the saved details, you can edit whichever you need to before you start the stream.</p>
            </div>
        </div>
        <form id="recall_form">
            <label for="unique_code"></label><input id="unique_code" name="unique_code" style="visibility: hidden"/><br>
            <div class="card">
                <div class="card-content">
                    <p id="recalled_window_server_error" style="color: red"></p>
                    <p class="subtitle">Selection</p>
                    <p id="endpoints_table_error" style="color: red"></p>
                    <table class="table table-bordered" id="endpoints_table">
                    </table>
                    <br>
                    <label for="stream_input">Stream input </label><br>
                    <input type="text" id="stream_input" name="stream_input" placeholder="stream1"
                           class="input"/><br><br>
                </div>
            </div>
            <div class="card">
                <div class="card-content">
                    <p class="title">Stream outputs</p>
                    <p class="subtitle">Recording</p>
                    <p>This is the file output of the stream, it will be saved as a .mkv file, and you can specify a
                        path<br>
                        It will be saved in the pending edits folder on the network drive (not to be confused with the
                        Google Drive)<br>
                        The format to follow is (folder/file) e.g. ERN/ERN.mkv, the folder will be created in pending
                        edits
                        if it doesn't already exist<br>
                        The extension (.mkv) will be added to the end of the file if it doesn't already contain it</p>
                    <br>
                    <label for="record_checkbox">Record stream </label>
                    <input name="record_checkbox" id="record_checkbox" type="checkbox"><br>
                    <label for="save_path">MKV save location </label><br>
                    <input type="text" name="save_path" id="save_path" placeholder="ERN/ERN.mkv" class="input"
                           style="visibility: hidden"><br><br>
                </div>
            </div>
            <div class="card">
                <div class="card-content">
                    <p class="subtitle">Website forwarding</p>
                    <p>If this is selected then it will default to stream1?pwd=gamer<br>
                        By default, the website works with streaming to the live endpoint so that is done by default<br>
                        Use the live endpoint followed by one of the keys in <a
                                href="https://cobra.dev.ystv.co.uk/streamkeys">cobra</a>
                        [stream key and password]<br>
                        This is especially important for events like Roses</p><br>
                    <label for="website_stream">Stream to website </label>
                    <input name="website_stream" id="website_stream" type="checkbox"><br>
                    <label for="website_stream_endpoint">Website stream endpoint</label><br>
                    <input name="website_stream_endpoint"
                           id="website_stream_endpoint"
                           placeholder="stream1?pwd=gamer"
                           class="input" style="visibility: hidden"><br><br>
                </div>
            </div>
            <div class="card">
                <div class="card-content">
                    <p class="subtitle">Additional forwarding</p>
                    <p>This section is for adding all the stream servers and keys<br>
                        All stream servers should start with "rtmp://" or "rtmps://"<br>
                        If you are unsure how to get the stream servers and keys from YouTube and Facebook then click on
                        the
                        links below<br>
                        <a target="_blank" href="/youtubehelp">YouTube</a><br>
                        <a target="_blank" href="/facebookhelp">Facebook</a></p><br>
                    <label for="input"></label><input type="text" id="input" hidden disabled/>
                    <table class="table table-bordered" id="streams_dynamic_field">
                        <tr>
                            <td><label for="stream_server_0">Enter the stream server - 1 </label><br>
                                <input type="text" name="stream_server_0" id="stream_server_0"
                                       placeholder="Enter stream server" class="input" required/><br><br>
                                <label for="stream_key_0">Enter the stream key - 1 </label><br>
                                <input type="text" name="stream_key_0" id="stream_key_0" placeholder="Enter stream key"
                                       class="input" required/><br><br>
                            </td>
                            <td>
                                <button type="button" name="add_stream_button" id="add_stream_button"
                                        class="btn btn-success button">Add More
                                </button>
                            </td>
                        </tr>
                    </table>
                    <p id="start_error" style="color: red"></p><br>
                    <input class="button" id="start_button" type="button" value="Start"><br><br><br>
                    <p id="delete_error" style="color: red"></p><br>
                    <label for="delete_checkbox">Enable the delete button </label>
                    <input name="delete_checkbox" id="delete_checkbox" type="checkbox"><br>
                    <input name="delete_button" id="delete_button" type="button" class="button" value="|> DELETE <|"
                           style="visibility: hidden" disabled hidden>
                </div>
            </div>
        </form>
    </div>
    <div class="card" id="started_window" hidden>
        <div class="card-content">
            <p class="title">STARTED!</p><br><br>
            <p>The stream has been forwarded, the unique code of this forward is below</p><br>
            <p id="started_unique" class="subtitle"></p><br>
            <p id="status_error" style="color: red"></p><br>
            <p id="status_window_server_error" style="color: red"></p>
            <table class="table table-bordered" id="table_status"></table>
            <br>
            <p>This window can be closed as long as you have the code to stop the stream<br>
                If you want to return later, then you will need to go to <a
                        href="https://streamer.dev.ystv.co.uk/resume"
                        target="_blank">https://streamer.dev.ystv.co.uk/resume</a><br><br><br>
                You can stop the stream by pressing the checkbox and then the button (prevent accidental stops)</p>
            <br><br><br>
            <p id="stop_error" style="color: red"></p><br>
            <label for="stop_checkbox">Enable the stop button </label>
            <input name="stop_checkbox" id="stop_checkbox" type="checkbox"><br>
            <input name="stop_button" id="stop_button" type="button" class="button" value="|> STOP <|"
                   style="visibility: hidden" disabled hidden>
        </div>
    </div>
    <div class="card" id="stopped_window" hidden>
        <div class="card-content">
            <p class="title">STOPPED!</p>
            <p>The forwarding has been stopped successfully<br>
                You can close this window now</p>
        </div>
    </div>
    <div class="card" id="deleted_window" hidden>
        <div class="card-content">
            <p class="title">DELETED!</p>
            <p>The saved stream has been deleted<br>
                You can close this window now</p>
        </div>
    </div>
    <script>
        document.getElementById("website_stream").onchange = function () {
            document.getElementById("website_stream_endpoint").disabled = !this.checked;
            document.getElementById("website_stream_endpoint").hidden = !this.checked;
            if (this.checked) {
                document.getElementById("website_stream_endpoint").style.visibility = "visible";
                document.getElementById("website_stream_endpoint").setAttribute("required", "required");
            } else {
                document.getElementById("website_stream_endpoint").style.visibility = "hidden";
                document.getElementById("website_stream_endpoint").removeAttribute("required");
            }
        };

        document.getElementById("record_checkbox").onchange = function () {
            document.getElementById("save_path").disabled = !this.checked;
            document.getElementById("save_path").hidden = !this.checked;
            if (this.checked) {
                document.getElementById("save_path").style.visibility = "visible";
                document.getElementById("save_path").setAttribute("required", "required");
            } else {
                document.getElementById("save_path").style.visibility = "hidden";
                document.getElementById("save_path").removeAttribute("required");
            }
        };

        document.getElementById("stop_checkbox").onchange = function () {
            document.getElementById("stop_button").disabled = !this.checked;
            document.getElementById("stop_button").hidden = !this.checked;
            if (this.checked) {
                document.getElementById("stop_button").style.visibility = "visible";
            } else {
                document.getElementById("stop_button").style.visibility = "hidden";
            }
        };

        document.getElementById("delete_checkbox").onchange = function () {
            document.getElementById("delete_button").disabled = !this.checked;
            document.getElementById("delete_button").hidden = !this.checked;
            if (this.checked) {
                document.getElementById("delete_button").style.visibility = "visible";
            } else {
                document.getElementById("delete_button").style.visibility = "hidden";
            }
        };

        let i = 1;

        function addStream() {
            $("#streams_dynamic_field").append("<tr id='row_" + i + "' class='dynamic-added'><td><label for='stream_server_" + i + "'>Enter the stream server - " + (i + 1) + " </label><br><input type='text' name='stream_server_" + i + "' id='stream_server_" + i + "' placeholder='Enter stream server' class='input' required/><br><br>\n" +
                "                <label for='stream_key_" + i + "'>Enter the stream key - " + (i + 1) + " </label><br><input type='text' name='stream_key_" + i + "' id='stream_key_" + i + "' placeholder='Enter stream key' class='input' required/><br><br></td><td><button type='button' name='remove' id='" + i + "' class='btn btn-danger btn_remove button'>X</button></td></tr><br>");
            i++;
        }

        document.getElementById("add_stream_button").addEventListener("click", () => addStream());

        $(document).on("click", ".btn_remove", function () {
            let button_id = $(this).attr("id");
            $("#row_" + button_id + "").remove();
        });

        $(document).ready(function () {
            let unique;

            let statusInterval;
            let recalledWindowServerErrorInterval;
            let statusWindowServerErrorInterval;

            let recalledWindowServerError = $("#recalled_window_server_error");
            let statusWindowServerError = $("#status_window_server_error");

            let endpointsCheckErrorInterval;

            let endpointsTableError = $("#endpoints_table_error");

            let endpointsCheck = function () {
                $.ajax({
                    url: "endpoints",
                    type: "post",
                    dataType: "text",
                    contentType: "application/x-www-form-urlencoded",
                    data: ({"unique": unique}),
                    success: function (data) {
                        const endpointsResponseJson = JSON.parse(data);
                        endpointTableError.html("");
                        if (endpointsResponseJson.error !== "") {
                            endpointTableError.html(endpointsResponseJson.error + "<br>");
                            if (endpointsCheckErrorInterval === undefined) {
                                endpointsCheckErrorInterval = setInterval(endpointsCheck, 5000);
                            }
                            return;
                        }
                        clearInterval(endpointsCheckErrorInterval);
                        for (let endpoint of endpointsResponseJson.endpoints) {
                            $("#endpoints_table").append("<tr>" +
                                "<td>" +
                                "<label for='endpoint~" + endpoint + "'>Endpoint: " + endpoint + "</label>" +
                                "</td>" +
                                "<td>" +
                                "<input name='endpoint~" + endpoint + "' id='endpoint~" + endpoint + "' type='checkbox' " + ((endpoint === "internal") ? "checked" : "") + "/>" +
                                "</td>" +
                                "</tr>");
                        }
                    },
                });
            };

            endpointsCheck();

            let recallError = $("#recall_error");
            let startError = $("#start_error");
            let statusError = $("#status_error");
            let stopError = $("#stop_error");
            let deleteError = $("#delete_error");

            $("#submit_unique").click(function () {
                recallError.html("");
                if ($("#unique").val().length === 0) {
                    recallError.html("The code field cannot be empty");
                    return;
                }
                $.ajax({
                    url: "recall",
                    type: "post",
                    dataType: "text",
                    contentType: "application/x-www-form-urlencoded",
                    data: $("#recall_form").serialize(),
                    success: function (data) {
                        const recallResponseJson = JSON.parse(data);
                        if (recallResponseJson.error !== "") {
                            recallError.html(recallResponseJson.error);
                            return;
                        }

                        recalledWindowServerErrorInterval = setInterval(function () {
                            $.ajax({
                                url: "serverError",
                                type: "post",
                                dataType: "text",
                                contentType: "application/x-www-form-urlencoded",
                                data: ({"unique_code": unique}),
                                success: function (data) {
                                    recalledWindowServerError.html("");
                                    const serverErrorResponseJson = JSON.parse(data);
                                    if (serverErrorResponseJson.error !== "") {
                                        recalledWindowServerError.html(serverErrorResponseJson.error + "<br>");
                                        return;
                                    }
                                    recalledWindowServerError.html(serverErrorResponseJson.serverError);
                                },
                            });
                        }, 5000);

                        document.getElementById("recall_stream_window").hidden = true;
                        document.getElementById("recall_stream_window").style.visibility = "hidden";
                        document.getElementById("recalled_stream_window").hidden = false;
                        document.getElementById("recalled_stream_window").style.visibility = "visible";
                        unique = recallResponseJson.unique;
                        console.log(unique);
                        document.getElementById("unique_code").value = unique;
                        document.getElementById("stream_input").value = recallResponseJson.inputStream;
                        if (recallResponseJson.recordingPath !== "") {
                            document.getElementById("record_checkbox").checked = true;
                            document.getElementById("save_path").style.visibility = "visible";
                            document.getElementById("save_path").setAttribute("required", "required");
                            document.getElementById("save_path").value = recallResponseJson.recordingPath;
                        }
                        if (recallResponseJson.websiteStream !== "") {
                            document.getElementById("website_stream").checked = true;
                            document.getElementById("website_stream_endpoint").style.visibility = "visible";
                            document.getElementById("website_stream_endpoint").setAttribute("required", "required");
                            document.getElementById("website_stream_endpoint").value = recallResponseJson.websiteStream;
                        }
                        console.log(recallResponseJson.streams);
                        for (let i = 0; i < recallResponseJson.streams.length; i++) {
                            console.log(i);
                            if (i !== 0) {
                                addStream();
                            }
                            let recalledStreamOutput = recallResponseJson.streams[i];
                            console.log(recalledStreamOutput);
                            document.getElementById("stream_server_" + i).value = recalledStreamOutput.streamServer;
                            document.getElementById("stream_key_" + i).value = recalledStreamOutput.streamKey;
                        }

                        let endpointTable = document.getElementById("endpoints_table");

                        for (let i = 0; i < endpointTable.rows.length; i++) {
                            let next = true;
                            let row = endpointTable.rows[i];
                            for (let j = 0; j < row.cells.length; j++) {
                                let col = row.cells[j];
                                let temp = col.getElementsByTagName("input");
                                if (temp.length > 0) {
                                    let element = temp[0];
                                    let parts = element.id.split("~");
                                    if (parts[1] === recallResponseJson.inputEndpoint) {
                                        element.checked = true;
                                        next = false;
                                        break;
                                    }
                                }
                            }
                            if ( !next) {
                                break;
                            }
                        }
                    },
                });
            });

            let startPressed = false;

            let startButton = $("#start_button");

            startButton.click(function () {
                if (startPressed) {
                    console.log("Start pressed multiple times");
                    return;
                }
                startPressed = true;
                startButton.disabled = true;

                startError.html("");

                let savePath = $("#save_path");

                if (savePath.val().length > 0 && document.getElementById("record_checkbox").checked) {
                    if (savePath.val().length === 0) {
                        console.log("SAVE PATH");
                        startError.html("The save path cannot be empty");
                        startPressed = false;
                        return;
                    }
                    if ( !savePath.val().endsWith(".mkv")) {
                        console.log("SAVE FILE");
                        startError.html("The save path must end in \".mkv\"");
                        startPressed = false;
                        return;
                    }
                }
                let websiteStreamEndpoint = $("#website_stream_endpoint");

                if (document.getElementById("website_stream").checked) {
                    if (websiteStreamEndpoint.val().length === 0 || !websiteStreamEndpoint.val().includes("?pwd=")) {
                        console.log("PWD");
                        startError.html("The website stream must contain \"?pwd=\"");
                        startPressed = false;
                        return;
                    }
                }
                let streamServer0 = $("#stream_server_0");
                if (streamServer0.val().length === 0 || $("#stream_key_0").val().length === 0) {
                    console.log("ADDITIONAL");
                    startError.html("The stream server and stream key cannot be empty");
                    startPressed = false;
                    return;
                }
                if ( !validURL(streamServer0.val())) {
                    console.log("STREAM SERVER");
                    startError.html("The stream server must contain \"rtmp://\" or \"rtmps://\" and needs to be a valid url");
                    startPressed = false;
                    return;
                }
                let j = 1;
                while (true) {
                    let streamServerJ = $("#stream_server_" + j);
                    if (streamServerJ.length === 0) {
                        if (j < i) {
                            j++;
                        } else {
                            break;
                        }
                        continue;
                    }
                    if (streamServerJ.val().length === 0 || $("#stream_key_" + j).val().length === 0) {
                        console.log("ADDITIONAL - " + j);
                        startError.html("The stream server and stream key cannot be empty");
                        startPressed = false;
                        return;
                    }
                    if ( !validURL(streamServerJ.val())) {
                        console.log("STREAM SERVER - " + j);
                        startError.html("The stream server must contain \"rtmp://\" or \"rtmps://\" and needs to be a valid url");
                        startPressed = false;
                        return;
                    }
                    if (j < i) {
                        j++;
                    } else {
                        break;
                    }
                }

                $.ajax({
                    url: "startUnique",
                    type: "post",
                    dataType: "text",
                    contentType: "application/x-www-form-urlencoded",
                    data: $("#recall_form").serialize(),
                    success: function (data) {
                        const startResponseJson = JSON.parse(data);
                        if (startResponseJson.error !== "") {
                            startError.html(startResponseJson.error);
                            startPressed = false;
                            return;
                        }

                        clearInterval(recalledWindowServerErrorInterval);

                        $("#started_unique").html(startResponseJson.unique);
                        document.getElementById("recalled_stream_window").hidden = true;
                        document.getElementById("recalled_stream_window").style.visibility = "hidden";
                        document.getElementById("started_window").hidden = false;
                        document.getElementById("started_window").style.visibility = "visible";
                        unique = startResponseJson.unique;
                        let tableStatus = $("#table_status");
                        if (document.getElementById("record_checkbox").checked) {
                            tableStatus.append("<tr><td><p class='subtitle'>Recording status</p><pre id='recording_status'></pre><br></td></tr>");
                        }
                        if (document.getElementById("website_stream").checked) {
                            tableStatus.append("<tr><td><p class='subtitle'>Website status</p><pre id='website_status'></pre><br></td></tr>");
                        }
                        tableStatus.append("<tr><td><p class='subtitle'>Stream 1 status</p><pre id='1_status'></pre><br></td></tr>");
                        let k = 2;
                        for (let j = 1; j < i; j++) {
                            try {
                                document.getElementById("row_" + j);
                                tableStatus.append("<tr><td><p class='subtitle'>Stream " + k + " status</p><pre id='" + k + "_status'></pre><br></td></tr>");
                                k++;
                            } catch (e) {

                            }
                        }
                        statusInterval = setInterval(function () {
                            console.log("Status");
                            $.ajax({
                                url: "status",
                                type: "post",
                                dataType: "text",
                                contentType: "application/x-www-form-urlencoded",
                                data: ({"unique_code": unique}),
                                success: function (data) {
                                    statusError.html("");

                                    const statusResponseJson = JSON.parse(data);
                                    if (statusResponseJson.error !== "") {
                                        statusError.html(statusResponseJson.error);
                                        return;
                                    }
                                    for (let j = 0; j < statusResponseJson.status.length; j++) {
                                        let status1 = statusResponseJson.status[j];
                                        if (status1.error.length > 0) {
                                            document.getElementById(status1.name + "_status").innerHTML = status1.error;
                                        } else {
                                            document.getElementById(status1.name + "_status").innerHTML = status1.response;
                                        }
                                    }
                                },
                            });
                        }, 5000);

                        statusWindowServerErrorInterval = setInterval(function () {
                            $.ajax({
                                url: "serverError",
                                type: "post",
                                dataType: "text",
                                contentType: "application/x-www-form-urlencoded",
                                data: ({"unique_code": unique}),
                                success: function (data) {
                                    statusWindowServerError.html();
                                    const serverErrorResponseJson = JSON.parse(data);
                                    if (serverErrorResponseJson.error !== "") {
                                        statusWindowServerError.html(serverErrorResponseJson.error);
                                        return;
                                    }
                                    if (serverErrorResponseJson.serverError.length > 0) {
                                        statusWindowServerError.html(serverErrorResponseJson.serverError + "You may have stream instabilities during this time<br>");
                                    }
                                },
                            });
                        }, 5000);
                    },
                });
                startButton.disabled = false;
            });

            let stopButton = $("#stop_button");

            stopButton.click(function () {
                stopButton.disabled = true;
                console.log("Stop pressed");
                $.ajax({
                    url: "stop",
                    type: "post",
                    dataType: "text",
                    contentType: "application/x-www-form-urlencoded",
                    data: ({"unique_code": unique}),
                    success: function (data) {
                        const stopResponseJson = JSON.parse(data);
                        if (stopResponseJson.error !== "") {
                            stopError.html(stopResponseJson.error);
                            return;
                        }
                        if (stopResponseJson.stopped) {
                            document.getElementById("started_window").hidden = true;
                            document.getElementById("started_window").style.visibility = "hidden";
                            document.getElementById("stopped_window").hidden = false;
                            document.getElementById("stopped_window").style.visibility = "visible";
                            unique = "";
                            clearInterval(statusInterval);
                            clearInterval(statusWindowServerErrorInterval);
                            return;
                        }
                        stopError.html("invalid response from server: " + stopResponseJson.stopped);
                        console.log("invalid response from server: " + stopResponseJson.stopped);
                    },
                });
                stopButton.disabled = false;
            });

            let deleteButton = $("#delete_button");

            deleteButton.click(function () {
                deleteButton.disabled = true;
                console.log("Delete pressed");
                $.ajax({
                    url: "delete",
                    type: "post",
                    dataType: "text",
                    contentType: "application/x-www-form-urlencoded",
                    data: ({"unique": unique}),
                    success: function (data) {
                        const deleteResponseJson = JSON.parse(data);
                        if (deleteResponseJson.error !== "") {
                            deleteError.html(deleteResponseJson.error);
                            return;
                        }
                        if (deleteResponseJson.deleted) {
                            document.getElementById("recalled_stream_window").hidden = true;
                            document.getElementById("recalled_stream_window").style.visibility = "hidden";
                            document.getElementById("deleted_window").hidden = false;
                            document.getElementById("deleted_window").style.visibility = "visible";
                            unique = "";
                            clearInterval(statusInterval);
                            clearInterval(recalledWindowServerErrorInterval);
                            return;
                        }
                        deleteError.html("invalid response from server: " + deleteResponseJson.deleted);
                        console.log("invalid response from server: " + deleteResponseJson.deleted);
                    },
                });
                deleteButton.disabled = false;
            });
        });

        function validURL(str) {
            let pattern = new RegExp("^(rtmps?:\\/\\/)?" + // protocol
                "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + // domain name
                "((\\d{1,3}\\.){3}\\d{1,3}))" + // OR ip (v4) address
                "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" + // port and path
                "(\\?[;&a-z\\d%_.~+=-]*)?" + // query string
                "(\\#[-a-z\\d_]*)?$", "i"); // fragment locator
            return !!pattern.test(str);
        }
    </script>
{{end}}